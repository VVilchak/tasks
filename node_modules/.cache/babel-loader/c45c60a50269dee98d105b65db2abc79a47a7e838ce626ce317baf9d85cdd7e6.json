{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers,\n        body: JSON.stringify(requestConfig.body)\n      });\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n_s(useHttp, \"e4kBt7QYx/QZ/pIdB4oHDuoMTZc=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message","useEffect","fetchTasks","taskAddHandler","task","setTasks","prevTasks","concat"],"sources":["/Users/mac/Desktop/Projects ðŸ’»/tasks/src/hooks/use-http.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n  \n    const sendRequest = async (taskText) => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(\n          requestConfig.url, {\n            method: requestConfig.method ? requestConfig.method : 'GET',\nheaders: requestConfig.headers,\nbody: JSON.stringify(requestConfig.body)\n          }\n        );\n  \n        if (!response.ok) {\n          throw new Error('Request failed!');\n        }\n  \n        const data = await response.json();\n  applyData(data);\n      \n      } catch (err) {\n        setError(err.message || 'Something went wrong!');\n      }\n      setIsLoading(false);\n    };\n  \n    useEffect(() => {\n      fetchTasks();\n    }, []);\n  \n    const taskAddHandler = (task) => {\n      setTasks((prevTasks) => prevTasks.concat(task));\n    };\n    return {\n        isLoading: isLoading,\n        error: error,\n        sendRequest: sendRequest\n    }\n}\n\nexport default useHttp;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAG,CAACC,aAAa,EAAEC,SAAS,KAAK;EAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMQ,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtCJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BT,aAAa,CAACU,GAAG,EAAE;QACjBC,MAAM,EAAEX,aAAa,CAACW,MAAM,GAAGX,aAAa,CAACW,MAAM,GAAG,KAAK;QACvEC,OAAO,EAAEZ,aAAa,CAACY,OAAO;QAC9BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,aAAa,CAACa,IAAI;MAC7B,CAAC,CACF;MAED,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MACxClB,SAAS,CAACiB,IAAI,CAAC;IAEX,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAlB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAEDmB,SAAS,CAAC,MAAM;IACdC,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/BC,QAAQ,CAAEC,SAAS,IAAKA,SAAS,CAACC,MAAM,CAACH,IAAI,CAAC,CAAC;EACjD,CAAC;EACD,OAAO;IACHvB,SAAS,EAAEA,SAAS;IACpBE,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACjB,CAAC;AACL,CAAC;AAAA,GAzCKP,OAAO;AA2Cb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}